import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import fitz  # PyMuPDF

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

PDF_PATH = "001.–û–ú–°.pdf"

# –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
print("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º PDF (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)...")
doc = fitz.open(PDF_PATH)
pdf_text = ""
for page in doc:
    pdf_text += page.get_text("text")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(doc)} —Å—Ç—Ä–∞–Ω–∏—Ü PDF")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
        [InlineKeyboardButton("üîç –ö–∞–∫ –∑–¥–µ—Å—å –∏—Å–∫–∞—Ç—å", callback_data="search_help")],
        [InlineKeyboardButton("üìò –°–∫–∞—á–∞—Ç—å –ü—Ä–æ–≥—Ä–∞–º–º—É –≥–æ—Å–≥–∞—Ä–∞–Ω—Ç–∏–π", callback_data="download_pdf")],
        [InlineKeyboardButton("üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –í–∞—Å", callback_data="contacts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "help":
        await query.message.reply_text(
            "üß≠ –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üßæ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –ø–æ –ú–ö–ë.\n"
            "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: –í–ú–ü –°-67\n\n"
            "üìò –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ü—Ä–æ–≥—Ä–∞–º–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π."
        )

    elif query.data == "search_help":
        await query.message.reply_text(
            "üîç –ö–∞–∫ –∑–¥–µ—Å—å –∏—Å–∫–∞—Ç—å?\n\n"
            "–ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ç–∞—Ä–∏—Ñ –ø–æ –ú–ö–ë.\n"
            "–ü—Ä–∏–º–µ—Ä: –í–ú–ü –°-67\n\n"
            "–ë–æ—Ç –Ω–∞–π–¥—ë—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ü—Ä–æ–≥—Ä–∞–º–º–µ –≥–æ—Å–≥–∞—Ä–∞–Ω—Ç–∏–π –û–ú–°."
        )

    elif query.data == "download_pdf":
        with open(PDF_PATH, "rb") as f:
            await query.message.reply_document(f, caption="üìò –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π –û–ú–°")

    elif query.data == "contacts":
        await query.message.reply_text(
            "üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n\n"
            "@MSL72Rph ü•∑ + TARS ü§ñ\n"
            "(–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ AI –≤ –º–µ–¥–∏—Ü–∏–Ω–µ)\n\n"
            "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: v1.4 üöÄ"
        )

# –ü–æ–∏—Å–∫ –ø–æ PDF
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    results = [line for line in pdf_text.split("\n") if text in line.lower()]

    if results:
        response = "\n".join(results[:10])
    else:
        response = "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

    await update.message.reply_text(response)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token("YOUR_TELEGRAM_BOT_TOKEN").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(MessageHandler(filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("contacts", start))
    app.add_handler(CommandHandler("download_pdf", start))
    app.add_handler(CommandHandler("search_help", start))
    app.add_handler(MessageHandler(filters.ALL, handle_message))
    app.add_handler(MessageHandler(filters.COMMAND, handle_message))

    from telegram.ext import CallbackQueryHandler
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ñ–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
    app.run_polling()
