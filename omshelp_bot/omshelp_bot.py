import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import PyPDF2

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

VERSION = "v2.0 ü•∑ü§ñ"

# –ó–∞–≥—Ä—É–∂–∞–µ–º PDF (–Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º)
PDF_PATH = "001.–û–ú–°.pdf"
pdf_file = open(PDF_PATH, "rb")
pdf_reader = PyPDF2.PdfReader(pdf_file)
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pdf_reader.pages)} —Å—Ç—Ä–∞–Ω–∏—Ü PDF")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üßæ –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
        [InlineKeyboardButton("üîç –ö–∞–∫ –∏—Å–∫–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="search_info")],
        [InlineKeyboardButton("üìò –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –≥–æ—Å–≥–∞—Ä–∞–Ω—Ç–∏–π", callback_data="program")],
        [InlineKeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –í–∞—Å", callback_data="contacts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. ({VERSION})\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "help":
        text = "üìÑ –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    elif query.data == "search_info":
        text = "üßæ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –ø–æ –ú–ö–ë. –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: –í–ú–ü –°-67"
    elif query.data == "program":
        text = "üìò –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π –û–ú–°"
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF
        with open("–ü—Ä–æ–≥—Ä–∞–º–º–∞_–≥–æ—Å–≥–∞—Ä–∞–Ω—Ç–∏–∏ÃÜ.pdf", "rb") as f:
            await query.message.reply_document(f, caption="üìò –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π –û–ú–°")
        return
    elif query.data == "contacts":
        text = "@MSL72Rph ü•∑ + TARS ü§ñ (–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ AI –≤ –º–µ–¥–∏—Ü–∏–Ω–µ)"

    await query.message.reply_text(text)

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query_text = update.message.text.strip().upper()
    results = []
    for i, page in enumerate(pdf_reader.pages):
        if query_text in page.extract_text().upper():
            results.append(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1}")
    if results:
        await update.message.reply_text("–ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(results))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", start))
app.add_handler(CallbackQueryHandler(button))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ñ–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
app.run_polling()
